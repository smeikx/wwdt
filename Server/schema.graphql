scalar Datetime # milliseconds since 1970-01-01, 00:00:00 UTC
scalar URL # String
scalar ProjectRole # String
scalar SessionRole # String

union Role = ProjectRole | SessionRole
union Contribution = Upload | Mark | Arrangement


type Project
{
	id: ID!
	title: String!
	creationTime: Datetime!
	description: String
	sessions: [Session!]
	contributors: [Contributor!]
}


# sequential parts of one session
# they are created when one session is paused and later resumed
type Episode
{
	start: Datetime!
	end: Datetime!
	marks: [Mark!]
	uploads: [Upload!]
}

type Session
{
	id: ID!
	title: String!
	description: String
	start: Datetime!
	end: Datetime!
	contributors: [Contributor!]
	episodes: [Episode!]
	markers: [Mark!]
	uploads: [Upload!]
	recordings: [Recording!]
	arrangements: [Arrangement!]
	tags: [String!]
}


type Recording
{
	id: ID!
	url: URL!
	creationTime: Datetime!
	duration: Int!
}


type ArrangementCoordinate
{
	x: Int!
	y: Int!
}

input ArrangementCoordinateInput
{
	x: Int!
	y: Int!
}


type ArrangedMark
{
	mark: Mark!
	position: ArrangementCoordinate!
	creator: Contributor!
}

type ArrangedConnection
{
	from: ArrangementCoordinate!
	to: ArrangementCoordinate!
	creator: Contributor!
}

type ArrangedLabel
{
	title: String!
	description: String
	position: ArrangementCoordinate!
	creator: Contributor!
}

type Arrangement
{
	title: String!
	description: String
	creator: Contributor!
	contributors: [Contributor]
	marks: [ArrangedMark!]
	connections: [ArrangedConnection!]
	labels: [ArrangedLabel!]
	editable: Boolean!
}


type Contributor
{
	id: ID!
	email: String!
	forename: String!
	surname: String
	projectRole: Role
	sessionRole: Role
	uploads: [Upload!]
	marks: [Mark!]
	arrangements: [Arrangement!]
	sessions: [Session!]
}

type Contributors
{
	readers: [Contributor!]
	editors: [Contributor!]
}

enum MediaType
{
	AUDIO
	VIDEO
	TEXT
	UNKNOWN
}

type Upload
{
	id: ID!
	creator: Contributor!
	uploadTime: Datetime!
	uploadName: String!
	displayName: String!
	url: URL!
	mediaType: MediaType!
	contributors: [Contributor!]
	editable: Boolean!
}

type Mark
{
	id: ID!
	timestamp: Datetime!
	title: String!
	description: String
	tags: [String!]
	uploads: [Upload!]
	frameCoordinates: [FrameCoordinate!]
	creator: Contributor!
	contributors: [Contributor!]
	editable: Boolean!
}

input MarkInput
{
	title: String
	timestamp: Datetime
	description: String
	tags: [String!]
	uploads: [ID!]
	frameCoordinates: FrameCoordinateInput
	contributors: [Contributor!]
}


# between 0 and 1; relative to the upper left corner
type FrameCoordinate
{
	recordingId: ID!
	x: Float!
	y: Float!
}

input FrameCoordinateInput
{
	recordingId: ID
	x: Float
	y: Float
}


type Recorder
{
	id: ID!
	name: String!
	description: String
	previewUrl: URL
}


type ContributionList
{
	own: [Contribution]!
	editable: [Contribution]!
	readable: [Contribution]!
}


type Query
{
	projects: [Project!]
	project (projectId: ID!): Project!

	runningSession: URL
	currentContributor: Contributor!

	recorders: [Recorder!]

	mark (markId: ID!): Mark!

	arrangements (
		arrangementId: ID = null,
		private: Boolean! = true,
		visible: Boolean! = true,
		editable: Boolean! = true
	): Arrangement!

	publicUploads (sessionId: ID!): [Upload!]
	privateUploads: [Upload!]
}



type Mutation
{

# PROJECT ##########################

	createProject (
		title: String = null,
		description: String = null,
	): Project!


# SESSION ##########################

	createSession (
			title: String = null,
			description: String = null,
			contributors: [ID!],
		): Session!

	runSession (
		id: ID!
	): Boolean

	haltSession (
		id: ID!
	): Boolean!


# CONTRIBUTORS ##########################

	addContributors (
		sessionId: ID!,
		contributorIds: [ID!]
	): ID!

	createContributor (
		email: String!,
		forename: String!,
		surname: String,
		projectRole: ProjectRole,
		sessionRole: SessionRole
	): Contributor!

	assignProjectRole (
		contributorId: ID!,
		roleId: ID!
	): Boolean!

	assignSessionRole (
		contributorId: ID!,
		roleId: ID!
	): Boolean!


# MARK ##########################

	createMark (
		mark: MarkInput!
	): Mark!

	# null properties wonâ€™t change
	# for deletion use empty strings/arrays
	updateMark (
		markId: ID!,
		mark: MarkInput!
	): ID # null on error


# ARRANGEMENTS ##########################

	createArrangement (
		session: ID!,
		title: String = null
		description: String = null
		contributors: [Contributor!]
	): ID!

	updateArrangement (
		arrangementId: ID!,
		title: String = null,
		description: String = null,
		contributors: [ID!] = null
	): Arrangement!

	createArrangedMark (
		arrangementId: ID!,
		markId: ID = null,
		coordinate: ArrangementCoordinateInput!
	): ID!

	updateArrangedMark (
		arrangedMarkId: ID!,
		coordinate: ArrangementCoordinateInput = null
	): ArrangedMark!

	createArrangedLabel (
		arrangementId: ID!,
		title: String = null,
		description: String = null,
		coordinate: ArrangementCoordinateInput!
	): Boolean!

	updateArrangedLabel (
		arrangedLabelId: ID!,
		title: String = null,
		description: String = null,
		coordinate: ArrangementCoordinateInput = null
	): Boolean!

	createArrangedConnection (
		arrangementId: ID!,
		fromCoordinate: ArrangementCoordinateInput!,
		toCoordinate: ArrangementCoordinateInput!
	): Boolean!

	updateArrangedConnection (
		arrangedConnectionId: ID!,
		fromCoordinate: ArrangementCoordinateInput = null,
		toCoordinate: ArrangementCoordinateInput = null
	): Boolean!


# RECORDING ##########################

	startRecording (
		devices: [ID!]!
	): Boolean!

	stopRecording (
		devices: [ID!]!
	): Boolean!


# PERMISSIONS ##########################

	addPermission (
		contributionId: ID!, # Upload, Mark, Arrangement
		contributorId: ID!
	): Boolean!

	removePermission (
		contributionId: ID!, # Upload, Mark, Arrangement
		contributorId: ID!
	): Boolean!
}

