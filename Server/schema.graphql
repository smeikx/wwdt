### SCALARS

scalar Datetime # milliseconds since 1970-01-01, 00:00:00 UTC
scalar URL # String



### PROJECT

type Project
{
	id: ID!
	title: String!
	creationTime: Datetime!
	description: String
	sessions: [Session!]
	coContributors: [CoContributor!]
}



### SESSION

type Session
{
	id: ID!
	title: String!
	description: String
	start: Datetime!
	end: Datetime!
	coContributors: [CoContributor!]
	episodes: [Episode!]
	markers: [Mark!]
	uploads: [Upload!]
	recordings: [Recording!]
	arrangements: [Arrangement!]
	tags: [String!]
	defaultPermission: Permission!
}

# sequential parts of one session
type Episode
{
	id: ID!
	start: Datetime!
	end: Datetime!
	marks: [Mark!]
	uploads: [Upload!]
}



### RECORDING

type Recording
{
	id: ID!
	url: URL!
	creationTime: Datetime!
	duration: Int!
	mediaType: RecordingType!
}

enum RecordingType
{
	AUDIO
	VIDEO
}

type Recorder
{
	id: ID!
	name: String!
	description: String
	previewUrl: URL
}



### CONTRIBUTORS

type Contributor
{
	id: ID!
	email: String!
	forename: String!
	surname: String
	projectRole: Role
	sessionRole: Role
	uploads: [Upload!]
	marks: [Mark!]
	arrangements: [Arrangement!]
	sessions: [Session!]
}

# for contributors excluding the creator
type CoContributor
{
	contributor: Contributor!
	permission: Permission!
}

input CoContributorInput
{
	contributorId: ID!
	permission: Permission!
}



### ROLES & PERMISSIONS

type Role
{
	id: ID!
	title: String!
	description: String
}

enum Permission
{
	READ # only readable, not editable
	EDIT # editable, exluding changing Permissions
	PERMIT # editable, including changing Permissions
}



### CONTRIBUTION

interface Contribution
{
	id: ID!
	title: String!
	creator: Contributor!
	description: String
	coContributors: [CoContributor!]
	permission: Permission!
}



### UPLOAD

type Upload implements Contribution
{
	id: ID!
	creator: Contributor!
	uploadTime: Datetime!
	uploadName: String!
	title: String!
	description: String
	url: URL!
	mediaType: MediaType!
	coContributors: [CoContributor!]
	permission: Permission!
}

enum MediaType
{
	AUDIO
	VIDEO
	TEXT
	UNKNOWN
}



### MARK

type Mark
{
	id: ID!
	timestamp: Datetime!
	title: String!
	description: String
	tags: [String!]
	uploads: [Upload!]
	frameCoordinates: [FrameCoordinate!]
	creator: Contributor!
	coContributors: [CoContributor!]
	permission: Permission!
}

input MarkInput
{
	title: String
	timestamp: Datetime
	description: String
	tags: [String!]
	uploads: [ID!]
	frameCoordinates: FrameCoordinateInput
	coContributors: [CoContributorInput!]
}

# between 0 and 1; relative to the upper left corner
type FrameCoordinate
{
	recordingId: ID!
	x: Float!
	y: Float!
}

input FrameCoordinateInput
{
	recordingId: ID
	x: Float
	y: Float
}



### ARRANGEMENTS

type Arrangement implements Contribution
{
	id: ID!
	title: String!
	description: String
	creator: Contributor!
	marks: [ArrangedMark!]
	connections: [ArrangedConnection!]
	labels: [ArrangedLabel!]
	coContributors: [CoContributor]
	permission: Permission!
}

# union Arrangeable = Mark | Upload | Label

interface Object
{
	id: ID!
	position: ArrangementCoordinate!
	width: Int
	height: Int
	creator: Contributor!
}

type ArrangedMark implements Object
{
	id: ID!
	mark: Mark!
	object: Arrangeable! # Mark!
	position: ArrangementCoordinate!
	width: Int
	height: Int
	creator: Contributor!
}

type ArrangedUpload implements Object
{
	id: ID!
	upload: Upload!
	position: ArrangementCoordinate!
	width: Int
	height: Int
	creator: Contributor!
}

type ArrangedLabel implements Object
{
	id: ID!
	title: String!
	description: String
	position: ArrangementCoordinate!
	width: Int
	height: Int
	creator: Contributor!
}

type ArrangedConnection
{
	id: ID!
	from: Arrangeable!
	to: Arrangeable!
	creator: Contributor!
}

type ArrangementCoordinate
{
	x: Int!
	y: Int!
}

input ArrangementCoordinateInput
{
	x: Int!
	y: Int!
}

