scalar Datetime


type Project
{
	id: ID!
	title: String!
	creationTime: Datetime!
	description: String
	sessions: [Session!]
}

input Project
{
	title: String!
	description: String
}


# sequential parts of one session
type Episode
{
	start: Datetime!
	end: Datetime!
}

type Session
{
	id: ID!
	title: String!
	description: String
	contributors: [Contributor!]
	episodes: [Episode!]
	markers: [Marker!]
	recordings: [Recording!]
	arrangements: [Arrangement!]
}

input Session
{
	title: String = null
	description: String = null
}

type ArrangementCoordinate
{
	x: Int!
	y: Int!
}

input ArrangementCoordinate
{
	x: Int!
	y: Int!
}

type ArrangedMark
{
	mark: Mark!
	position ArrangementCoordinate!
}

type ArrangementConnection
{
	from: ArrangementCoordinate!
	to: ArrangementCoordinate!
}

type ArrangementLabel
{
	title: String!
	description: String
}

type Arrangement
{
	title: String!
	description: String
	creator: Contributor!
	contributors: [Contributor]
	marks: [ArrangedMark!]
	connections: [ArrangementConnection!]
	labels: [ArrangementLabel!]
}

type Recording
{
#	start
#	pause
#	stop
#	streams
}

Stream
{
	type
	url
}

type Contributor
{
	id: ID!
	email: String!
	forename: String!
	surname: String
	projectRole: Role
	sessionRole: Role
	uploads: [Upload!]
	marks: [Mark!]
	arrangements: [Arrangement!]
	sessions: [Session!]
}

enum MediaType
{
	AUDIO
	VIDEO
	TEXT
	UNKNOWN
}

type Upload
{
	creator: Contributor!
	uploadTime: Datetime!
	uploadName: String!
	displayName: String!
	url: String!
	mediaType: MediaType!
}

type Mark
{

	title: String!
	description: String
	tags: [String!]
	uploads: [Upload!]
	frameCoordinates: [FrameCoordinate!]
}

# between 0 and 1; relative to the upper left corner
type FrameCoordinate
{
	x: Float! 
	y: Float!
}


type Query
{
	runningSession: String # URL
	projects (): [Project!]
	project (projectId: ID!): Project!
	session (sessionId: ID!): Session!
	mark (markId: ID!): Mark!
	arrangement (arrangementId: ID!): Arrangement!
	publicUploads (sessionId: ID!): [Upload!]
	privateUploads (): [Upload!]
}


type Mutation
{
# PROJECT ##########################
	createProject (
		title: String = "",
		description: String = "",
	): Project!

# SESSION ##########################
	createSession (
			title: String = "",
			description: String = "",
			contributors: [ID!],
		): Session!

	runSession (
		id: ID!
	): Boolean!

	haltSession (
		id: ID!
	): Boolean!

# CONTRIBUTORS ##########################
	addContributors (
		sessionId: ID!,
		contributorIds: [ID!]
	): ID!

	createContributor (
		email: String!,
		forename: String!,
		surname: String,
		projectRole: ProjectRole,
		sessionRole: Sessionrole
	): Contributor!

	assignProjectRole (
		contributorId: ID!,
		roleId: ID!
	): Boolean!

	assignSessionRole (
		contributorId: ID!,
		roleId: ID!
	): Boolean!

# MARK ##########################
	createMark (
		title: String = null,
		description: String = null,
		tags: [String!] = null,
		uploads: [ID!] = null,
		frameCoordinate: FrameCoordinate = null
	): Mark!

# ARRANGEMENTS ##########################
	createArrangement (
		session: ID!,
		title: String = "",
		description: String = "",
	): Arrangement!

	arrangeMark (
		arrangementId: ID!,
		markId: ID!,
		coordinate: ArrangementCoordinate!
	): Boolean!

	arrangeLabel (
		arrangementId: ID!,
		title: String!,
		description: String!,
		coordinate: ArrangementCoordinate!
	): Boolean!

	arrangeConnection (
		arrangementId: ID!,
		fromCoordinate: ArrangementCoordinate!,
		toCoordinate: ArrangementCoordinate!
	): Boolean!

# RECORDING ##########################
	startRecording (): Boolean!

	stopRecording (): Boolean!
}

