scalar Datetime # milliseconds since 1970-01-01, 00:00:00 UTC
scalar URL # String
scalar ProjectRole # String
scalar SessionRole # String

union Role = ProjectRole | SessionRole
union Contribution = Upload | Mark | Arrangement


type Project
{
	id: ID!
	title: String!
	creationTime: Datetime!
	description: String
	sessions: [Session!]
	contributors: [Contributor!]
}


# sequential parts of one session
# they are created when one session is paused and later resumed
type Episode
{
	start: Datetime!
	end: Datetime!
	marks: [Mark!]
	uploads: [Upload!]
}

type Session
{
	id: ID!
	title: String!
	description: String
	start: Datetime!
	end: Datetime!
	contributors: [Contributor!]
	episodes: [Episode!]
	markers: [Mark!]
	uploads: [Upload!]
	recordings: [Recording!]
	arrangements: [Arrangement!]
	tags: [String!]
}


type Recording
{
	id: ID!
	url: URL!
	creationTime: Datetime!
	duration: Int!
}


type ArrangementCoordinate
{
	x: Int!
	y: Int!
}

input ArrangementCoordinateInput
{
	x: Int!
	y: Int!
}


type ArrangedMark
{
	mark: Mark!
	position: ArrangementCoordinate!
	creator: Contributor!
}

type ArrangedConnection
{
	from: ArrangementCoordinate!
	to: ArrangementCoordinate!
	creator: Contributor!
}

type ArrangedLabel
{
	title: String!
	description: String
	position: ArrangementCoordinate!
	creator: Contributor!
}

type Arrangement
{
	title: String!
	description: String
	creator: Contributor!
	contributors: [Contributor]
	marks: [ArrangedMark!]
	connections: [ArrangedConnection!]
	labels: [ArrangedLabel!]
	editable: Boolean!
	isOwn: Boolean!
}


type Contributor
{
	id: ID!
	email: String!
	forename: String!
	surname: String
	projectRole: Role
	sessionRole: Role
	uploads: [Upload!]
	marks: [Mark!]
	arrangements: [Arrangement!]
	sessions: [Session!]
}

type Contributors
{
	readers: [Contributor!]
	editors: [Contributor!]
}

enum MediaType
{
	AUDIO
	VIDEO
	TEXT
	UNKNOWN
}

type Upload
{
	id: ID!
	creator: Contributor!
	uploadTime: Datetime!
	uploadName: String!
	displayName: String!
	url: URL!
	mediaType: MediaType!
	contributors: [Contributor!]
	editable: Boolean!
	isOwn: Boolean!
}

type Mark
{
	id: ID!
	timestamp: Datetime!
	title: String!
	description: String
	tags: [String!]
	uploads: [Upload!]
	frameCoordinates: [FrameCoordinate!]
	creator: Contributor!
	contributors: [Contributor!]
	editable: Boolean!
	isOwn: Boolean!
}

input MarkInput
{
	title: String
	timestamp: Datetime
	description: String
	tags: [String!]
	uploads: [ID!]
	frameCoordinates: FrameCoordinateInput
	contributors: [Contributor!]
}


# between 0 and 1; relative to the upper left corner
type FrameCoordinate
{
	recordingId: ID!
	x: Float!
	y: Float!
}

input FrameCoordinateInput
{
	recordingId: ID
	x: Float
	y: Float
}


type Recorder
{
	id: ID!
	name: String!
	description: String
	previewUrl: URL
}


enum Permission
{
	READABLE # only readable, not editable
	EDITABLE # editable exluding own
	SELFMADE # created by current contributor
}
